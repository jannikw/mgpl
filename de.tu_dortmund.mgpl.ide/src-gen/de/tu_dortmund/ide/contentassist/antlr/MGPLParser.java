/*
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.tu_dortmund.ide.contentassist.antlr.internal.InternalMGPLParser;
import de.tu_dortmund.services.MGPLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MGPLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGPLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGPLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getReferenceTargetAccess().getAlternatives(), "rule__ReferenceTarget__Alternatives");
			builder.put(grammarAccess.getDeclAccess().getAlternatives_0(), "rule__Decl__Alternatives_0");
			builder.put(grammarAccess.getVarDeclAccess().getAlternatives(), "rule__VarDecl__Alternatives");
			builder.put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
			builder.put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
			builder.put(grammarAccess.getVarAccess().getAlternatives(), "rule__Var__Alternatives");
			builder.put(grammarAccess.getRelExprAccess().getOpAlternatives_1_1_0(), "rule__RelExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getAddExprAccess().getOpAlternatives_1_1_0(), "rule__AddExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getMulExprAccess().getOpAlternatives_1_1_0(), "rule__MulExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getSimpleExprAccess().getAlternatives(), "rule__SimpleExpr__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getOpAlternatives_0_0(), "rule__UnaryExpr__OpAlternatives_0_0");
			builder.put(grammarAccess.getObjTypeAccess().getAlternatives(), "rule__ObjType__Alternatives");
			builder.put(grammarAccess.getKeyStrokeAccess().getAlternatives(), "rule__KeyStroke__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getDeclAccess().getGroup(), "rule__Decl__Group__0");
			builder.put(grammarAccess.getScalarVarDeclAccess().getGroup(), "rule__ScalarVarDecl__Group__0");
			builder.put(grammarAccess.getScalarVarDeclAccess().getGroup_2(), "rule__ScalarVarDecl__Group_2__0");
			builder.put(grammarAccess.getArrayVarDeclAccess().getGroup(), "rule__ArrayVarDecl__Group__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup(), "rule__ObjDecl__Group__0");
			builder.put(grammarAccess.getObjArrayDeclAccess().getGroup(), "rule__ObjArrayDecl__Group__0");
			builder.put(grammarAccess.getAttrAssListAccess().getGroup(), "rule__AttrAssList__Group__0");
			builder.put(grammarAccess.getAttrAssListAccess().getGroup_1(), "rule__AttrAssList__Group_1__0");
			builder.put(grammarAccess.getAttrAssAccess().getGroup(), "rule__AttrAss__Group__0");
			builder.put(grammarAccess.getAnimBlockAccess().getGroup(), "rule__AnimBlock__Group__0");
			builder.put(grammarAccess.getAnimTargetAccess().getGroup(), "rule__AnimTarget__Group__0");
			builder.put(grammarAccess.getEventBlockAccess().getGroup(), "rule__EventBlock__Group__0");
			builder.put(grammarAccess.getStmtBlockAccess().getGroup(), "rule__StmtBlock__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_5(), "rule__IfStmt__Group_5__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getAssStmtAccess().getGroup(), "rule__AssStmt__Group__0");
			builder.put(grammarAccess.getVarAccess().getGroup_1(), "rule__Var__Group_1__0");
			builder.put(grammarAccess.getVarAccess().getGroup_1_4(), "rule__Var__Group_1_4__0");
			builder.put(grammarAccess.getVarAccess().getGroup_2(), "rule__Var__Group_2__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
			builder.put(grammarAccess.getBoolExprAccess().getGroup(), "rule__BoolExpr__Group__0");
			builder.put(grammarAccess.getBoolExprAccess().getGroup_1(), "rule__BoolExpr__Group_1__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup(), "rule__RelExpr__Group__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup_1(), "rule__RelExpr__Group_1__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup(), "rule__AddExpr__Group__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup_1(), "rule__AddExpr__Group_1__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup(), "rule__MulExpr__Group__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup_1(), "rule__MulExpr__Group_1__0");
			builder.put(grammarAccess.getSimpleExprAccess().getGroup_2(), "rule__SimpleExpr__Group_2__0");
			builder.put(grammarAccess.getSimpleExprAccess().getGroup_2_1(), "rule__SimpleExpr__Group_2_1__0");
			builder.put(grammarAccess.getSimpleExprAccess().getGroup_3(), "rule__SimpleExpr__Group_3__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup(), "rule__UnaryExpr__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getAttributesAssignment_3(), "rule__Program__AttributesAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getDeclarationsAssignment_5(), "rule__Program__DeclarationsAssignment_5");
			builder.put(grammarAccess.getProgramAccess().getInitAssignment_6(), "rule__Program__InitAssignment_6");
			builder.put(grammarAccess.getProgramAccess().getBlocksAssignment_7(), "rule__Program__BlocksAssignment_7");
			builder.put(grammarAccess.getScalarVarDeclAccess().getNameAssignment_1(), "rule__ScalarVarDecl__NameAssignment_1");
			builder.put(grammarAccess.getScalarVarDeclAccess().getInitializationAssignment_2_1(), "rule__ScalarVarDecl__InitializationAssignment_2_1");
			builder.put(grammarAccess.getArrayVarDeclAccess().getNameAssignment_1(), "rule__ArrayVarDecl__NameAssignment_1");
			builder.put(grammarAccess.getArrayVarDeclAccess().getSizeAssignment_3(), "rule__ArrayVarDecl__SizeAssignment_3");
			builder.put(grammarAccess.getObjDeclAccess().getTypeAssignment_0(), "rule__ObjDecl__TypeAssignment_0");
			builder.put(grammarAccess.getObjDeclAccess().getNameAssignment_1(), "rule__ObjDecl__NameAssignment_1");
			builder.put(grammarAccess.getObjDeclAccess().getAttributesAssignment_3(), "rule__ObjDecl__AttributesAssignment_3");
			builder.put(grammarAccess.getObjArrayDeclAccess().getTypeAssignment_0(), "rule__ObjArrayDecl__TypeAssignment_0");
			builder.put(grammarAccess.getObjArrayDeclAccess().getNameAssignment_1(), "rule__ObjArrayDecl__NameAssignment_1");
			builder.put(grammarAccess.getObjArrayDeclAccess().getSizeAssignment_3(), "rule__ObjArrayDecl__SizeAssignment_3");
			builder.put(grammarAccess.getAttrAssListAccess().getAssignmentsAssignment_0(), "rule__AttrAssList__AssignmentsAssignment_0");
			builder.put(grammarAccess.getAttrAssListAccess().getAssignmentsAssignment_1_1(), "rule__AttrAssList__AssignmentsAssignment_1_1");
			builder.put(grammarAccess.getAttrAssAccess().getAttributeNameAssignment_0(), "rule__AttrAss__AttributeNameAssignment_0");
			builder.put(grammarAccess.getAttrAssAccess().getValueAssignment_2(), "rule__AttrAss__ValueAssignment_2");
			builder.put(grammarAccess.getAnimBlockAccess().getNameAssignment_1(), "rule__AnimBlock__NameAssignment_1");
			builder.put(grammarAccess.getAnimBlockAccess().getTargetAssignment_3(), "rule__AnimBlock__TargetAssignment_3");
			builder.put(grammarAccess.getAnimBlockAccess().getActionAssignment_5(), "rule__AnimBlock__ActionAssignment_5");
			builder.put(grammarAccess.getAnimTargetAccess().getTypeAssignment_0(), "rule__AnimTarget__TypeAssignment_0");
			builder.put(grammarAccess.getAnimTargetAccess().getNameAssignment_1(), "rule__AnimTarget__NameAssignment_1");
			builder.put(grammarAccess.getEventBlockAccess().getKeyAssignment_1(), "rule__EventBlock__KeyAssignment_1");
			builder.put(grammarAccess.getEventBlockAccess().getActionAssignment_2(), "rule__EventBlock__ActionAssignment_2");
			builder.put(grammarAccess.getStmtBlockAccess().getStatementsAssignment_2(), "rule__StmtBlock__StatementsAssignment_2");
			builder.put(grammarAccess.getIfStmtAccess().getConditionAssignment_2(), "rule__IfStmt__ConditionAssignment_2");
			builder.put(grammarAccess.getIfStmtAccess().getThenAssignment_4(), "rule__IfStmt__ThenAssignment_4");
			builder.put(grammarAccess.getIfStmtAccess().getElseAssignment_5_1(), "rule__IfStmt__ElseAssignment_5_1");
			builder.put(grammarAccess.getForStmtAccess().getInitAssignment_2(), "rule__ForStmt__InitAssignment_2");
			builder.put(grammarAccess.getForStmtAccess().getConditionAssignment_4(), "rule__ForStmt__ConditionAssignment_4");
			builder.put(grammarAccess.getForStmtAccess().getStepAssignment_6(), "rule__ForStmt__StepAssignment_6");
			builder.put(grammarAccess.getForStmtAccess().getBodyAssignment_8(), "rule__ForStmt__BodyAssignment_8");
			builder.put(grammarAccess.getAssignmentAccess().getVarAssignment_0(), "rule__Assignment__VarAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getVarAccess().getVariableAssignment_0(), "rule__Var__VariableAssignment_0");
			builder.put(grammarAccess.getVarAccess().getVariableAssignment_1_0(), "rule__Var__VariableAssignment_1_0");
			builder.put(grammarAccess.getVarAccess().getIndexAssignment_1_2(), "rule__Var__IndexAssignment_1_2");
			builder.put(grammarAccess.getVarAccess().getAttributeAssignment_1_4_1(), "rule__Var__AttributeAssignment_1_4_1");
			builder.put(grammarAccess.getVarAccess().getVariableAssignment_2_0(), "rule__Var__VariableAssignment_2_0");
			builder.put(grammarAccess.getVarAccess().getAttributeAssignment_2_2(), "rule__Var__AttributeAssignment_2_2");
			builder.put(grammarAccess.getOrExprAccess().getOpAssignment_1_1(), "rule__OrExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getBoolExprAccess().getOpAssignment_1_1(), "rule__BoolExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBoolExprAccess().getRightAssignment_1_2(), "rule__BoolExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getRelExprAccess().getOpAssignment_1_1(), "rule__RelExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getRelExprAccess().getRightAssignment_1_2(), "rule__RelExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAddExprAccess().getOpAssignment_1_1(), "rule__AddExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getAddExprAccess().getRightAssignment_1_2(), "rule__AddExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getMulExprAccess().getOpAssignment_1_1(), "rule__MulExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getMulExprAccess().getRightAssignment_1_2(), "rule__MulExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getSimpleExprAccess().getToucheeAssignment_2_1_2(), "rule__SimpleExpr__ToucheeAssignment_2_1_2");
			builder.put(grammarAccess.getUnaryExprAccess().getOpAssignment_0(), "rule__UnaryExpr__OpAssignment_0");
			builder.put(grammarAccess.getUnaryExprAccess().getOperandAssignment_1(), "rule__UnaryExpr__OperandAssignment_1");
			builder.put(grammarAccess.getNumberExprAccess().getNumberAssignment(), "rule__NumberExpr__NumberAssignment");
			builder.put(grammarAccess.getVarExprAccess().getVarAssignment(), "rule__VarExpr__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGPLGrammarAccess grammarAccess;

	@Override
	protected InternalMGPLParser createParser() {
		InternalMGPLParser result = new InternalMGPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MGPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
