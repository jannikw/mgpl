/*
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MGPLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttrAssListParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsDeclParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Assignment cInitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitStmtBlockParserRuleCall_6_0 = (RuleCall)cInitAssignment_6.eContents().get(0);
		private final Assignment cBlocksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlocksBlockParserRuleCall_7_0 = (RuleCall)cBlocksAssignment_7.eContents().get(0);
		
		//Program:
		//	'game' name=IDF
		//	'(' attributes=AttrAssList? ')'
		//	declarations+=Decl*
		//	init=StmtBlock
		//	blocks+=Block*;
		@Override public ParserRule getRule() { return rule; }
		
		//'game' name=IDF '(' attributes=AttrAssList? ')' declarations+=Decl* init=StmtBlock blocks+=Block*
		public Group getGroup() { return cGroup; }
		
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes=AttrAssList?
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttrAssList
		public RuleCall getAttributesAttrAssListParserRuleCall_3_0() { return cAttributesAttrAssListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//declarations+=Decl*
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }
		
		//Decl
		public RuleCall getDeclarationsDeclParserRuleCall_5_0() { return cDeclarationsDeclParserRuleCall_5_0; }
		
		//init=StmtBlock
		public Assignment getInitAssignment_6() { return cInitAssignment_6; }
		
		//StmtBlock
		public RuleCall getInitStmtBlockParserRuleCall_6_0() { return cInitStmtBlockParserRuleCall_6_0; }
		
		//blocks+=Block*
		public Assignment getBlocksAssignment_7() { return cBlocksAssignment_7; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_7_0() { return cBlocksBlockParserRuleCall_7_0; }
	}
	public class ReferenceTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ReferenceTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProgramParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnimTargetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ReferenceTarget:
		//	Program | Decl | AnimBlock | AnimTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//Program | Decl | AnimBlock | AnimTarget
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Program
		public RuleCall getProgramParserRuleCall_0() { return cProgramParserRuleCall_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_1() { return cDeclParserRuleCall_1; }
		
		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_2() { return cAnimBlockParserRuleCall_2; }
		
		//AnimTarget
		public RuleCall getAnimTargetParserRuleCall_3() { return cAnimTargetParserRuleCall_3; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cObjDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjArrayDeclParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Decl:
		//	(ObjDecl | ObjArrayDecl | VarDecl) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(ObjDecl | ObjArrayDecl | VarDecl) ';'
		public Group getGroup() { return cGroup; }
		
		//(ObjDecl | ObjArrayDecl | VarDecl)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ObjDecl
		public RuleCall getObjDeclParserRuleCall_0_0() { return cObjDeclParserRuleCall_0_0; }
		
		//ObjArrayDecl
		public RuleCall getObjArrayDeclParserRuleCall_0_1() { return cObjArrayDeclParserRuleCall_0_1; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0_2() { return cVarDeclParserRuleCall_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.VarDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayVarDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDecl:
		//	ScalarVarDecl | ArrayVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ScalarVarDecl | ArrayVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScalarVarDecl
		public RuleCall getScalarVarDeclParserRuleCall_0() { return cScalarVarDeclParserRuleCall_0; }
		
		//ArrayVarDecl
		public RuleCall getArrayVarDeclParserRuleCall_1() { return cArrayVarDeclParserRuleCall_1; }
	}
	public class ScalarVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ScalarVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitializationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializationExprParserRuleCall_2_1_0 = (RuleCall)cInitializationAssignment_2_1.eContents().get(0);
		
		//ScalarVarDecl:
		//	'int' name=IDF ('=' initialization=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' name=IDF ('=' initialization=Expr)?
		public Group getGroup() { return cGroup; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//('=' initialization=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//initialization=Expr
		public Assignment getInitializationAssignment_2_1() { return cInitializationAssignment_2_1; }
		
		//Expr
		public RuleCall getInitializationExprParserRuleCall_2_1_0() { return cInitializationExprParserRuleCall_2_1_0; }
	}
	public class ArrayVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ArrayVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayVarDecl:
		//	'int' name=IDF '[' size=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' name=IDF '[' size=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ObjDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ObjDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttrAssListParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjDecl:
		//	type=ObjType name=IDF '(' attributes=AttrAssList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ObjType name=IDF '(' attributes=AttrAssList? ')'
		public Group getGroup() { return cGroup; }
		
		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ObjType
		public RuleCall getTypeObjTypeEnumRuleCall_0_0() { return cTypeObjTypeEnumRuleCall_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes=AttrAssList?
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttrAssList
		public RuleCall getAttributesAttrAssListParserRuleCall_3_0() { return cAttributesAttrAssListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ObjArrayDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ObjArrayDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjArrayDecl:
		//	type=ObjType name=IDF '[' size=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ObjType name=IDF '[' size=INT ']'
		public Group getGroup() { return cGroup; }
		
		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ObjType
		public RuleCall getTypeObjTypeEnumRuleCall_0_0() { return cTypeObjTypeEnumRuleCall_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class AttrAssListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AttrAssList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentsAttrAssParserRuleCall_0_0 = (RuleCall)cAssignmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsAttrAssParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		
		//AttrAssList:
		//	assignments+=AttrAss (',' assignments+=AttrAss)*;
		@Override public ParserRule getRule() { return rule; }
		
		//assignments+=AttrAss (',' assignments+=AttrAss)*
		public Group getGroup() { return cGroup; }
		
		//assignments+=AttrAss
		public Assignment getAssignmentsAssignment_0() { return cAssignmentsAssignment_0; }
		
		//AttrAss
		public RuleCall getAssignmentsAttrAssParserRuleCall_0_0() { return cAssignmentsAttrAssParserRuleCall_0_0; }
		
		//(',' assignments+=AttrAss)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignments+=AttrAss
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }
		
		//AttrAss
		public RuleCall getAssignmentsAttrAssParserRuleCall_1_1_0() { return cAssignmentsAttrAssParserRuleCall_1_1_0; }
	}
	public class AttrAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AttrAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDFTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttrAss:
		//	attributeName=IDF '=' value=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeName=IDF '=' value=Expr
		public Group getGroup() { return cGroup; }
		
		//attributeName=IDF
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }
		
		//IDF
		public RuleCall getAttributeNameIDFTerminalRuleCall_0_0() { return cAttributeNameIDFTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expr
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_2_0() { return cValueExprParserRuleCall_2_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	AnimBlock | EventBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//AnimBlock | EventBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_0() { return cAnimBlockParserRuleCall_0; }
		
		//EventBlock
		public RuleCall getEventBlockParserRuleCall_1() { return cEventBlockParserRuleCall_1; }
	}
	public class AnimBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AnimBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnimationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetAnimTargetParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionStmtBlockParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		
		//AnimBlock:
		//	'animation' name=IDF '(' target=AnimTarget ')' action=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'animation' name=IDF '(' target=AnimTarget ')' action=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'animation'
		public Keyword getAnimationKeyword_0() { return cAnimationKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=AnimTarget
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//AnimTarget
		public RuleCall getTargetAnimTargetParserRuleCall_3_0() { return cTargetAnimTargetParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//action=StmtBlock
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//StmtBlock
		public RuleCall getActionStmtBlockParserRuleCall_5_0() { return cActionStmtBlockParserRuleCall_5_0; }
	}
	public class AnimTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AnimTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnimTarget:
		//	type=ObjType name=IDF;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ObjType name=IDF
		public Group getGroup() { return cGroup; }
		
		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ObjType
		public RuleCall getTypeObjTypeEnumRuleCall_0_0() { return cTypeObjTypeEnumRuleCall_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
	}
	public class EventBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.EventBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKeyStrokeEnumRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionStmtBlockParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//EventBlock:
		//	'on' key=KeyStroke action=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' key=KeyStroke action=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//key=KeyStroke
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//KeyStroke
		public RuleCall getKeyKeyStrokeEnumRuleCall_1_0() { return cKeyKeyStrokeEnumRuleCall_1_0; }
		
		//action=StmtBlock
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//StmtBlock
		public RuleCall getActionStmtBlockParserRuleCall_2_0() { return cActionStmtBlockParserRuleCall_2_0; }
	}
	public class StmtBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.StmtBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStmtBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStmtParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StmtBlock:
		//	'{' {StmtBlock} statements+=Stmt* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {StmtBlock} statements+=Stmt* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{StmtBlock}
		public Action getStmtBlockAction_1() { return cStmtBlockAction_1; }
		
		//statements+=Stmt*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Stmt
		public RuleCall getStatementsStmtParserRuleCall_2_0() { return cStatementsStmtParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Stmt:
		//	IfStmt | ForStmt | AssStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStmt | ForStmt | AssStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_1() { return cForStmtParserRuleCall_1; }
		
		//AssStmt
		public RuleCall getAssStmtParserRuleCall_2() { return cAssStmtParserRuleCall_2; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStmtBlockParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStmtBlockParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfStmt:
		//	'if' '(' condition=Expr ')' then=StmtBlock (=> 'else' else=StmtBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expr ')' then=StmtBlock (=> 'else' else=StmtBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_2_0() { return cConditionExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=StmtBlock
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//StmtBlock
		public RuleCall getThenStmtBlockParserRuleCall_4_0() { return cThenStmtBlockParserRuleCall_4_0; }
		
		//(=> 'else' else=StmtBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=StmtBlock
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//StmtBlock
		public RuleCall getElseStmtBlockParserRuleCall_5_1_0() { return cElseStmtBlockParserRuleCall_5_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitAssignmentParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExprParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepAssignmentParserRuleCall_6_0 = (RuleCall)cStepAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStmtBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStmt:
		//	'for' '(' init=Assignment ';' condition=Expr ';' step=Assignment ')' body=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' init=Assignment ';' condition=Expr ';' step=Assignment ')' body=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//init=Assignment
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//Assignment
		public RuleCall getInitAssignmentParserRuleCall_2_0() { return cInitAssignmentParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=Expr
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_4_0() { return cConditionExprParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//step=Assignment
		public Assignment getStepAssignment_6() { return cStepAssignment_6; }
		
		//Assignment
		public RuleCall getStepAssignmentParserRuleCall_6_0() { return cStepAssignmentParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=StmtBlock
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//StmtBlock
		public RuleCall getBodyStmtBlockParserRuleCall_8_0() { return cBodyStmtBlockParserRuleCall_8_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	var=Var '=' value=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Var '=' value=Expr
		public Group getGroup() { return cGroup; }
		
		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expr
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_2_0() { return cValueExprParserRuleCall_2_0; }
	}
	public class AssStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AssStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AssStmt:
		//	Assignment ';';
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment ';'
		public Group getGroup() { return cGroup; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Var");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVariableReferenceTargetCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableReferenceTargetIDFTerminalRuleCall_0_0_1 = (RuleCall)cVariableReferenceTargetCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cVariableReferenceTargetCrossReference_1_0_0 = (CrossReference)cVariableAssignment_1_0.eContents().get(0);
		private final RuleCall cVariableReferenceTargetIDFTerminalRuleCall_1_0_0_1 = (RuleCall)cVariableReferenceTargetCrossReference_1_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExprParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cAttributeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cAttributeIDFTerminalRuleCall_1_4_1_0 = (RuleCall)cAttributeAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cVariableReferenceTargetCrossReference_2_0_0 = (CrossReference)cVariableAssignment_2_0.eContents().get(0);
		private final RuleCall cVariableReferenceTargetIDFTerminalRuleCall_2_0_0_1 = (RuleCall)cVariableReferenceTargetCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAttributeIDFTerminalRuleCall_2_2_0 = (RuleCall)cAttributeAssignment_2_2.eContents().get(0);
		
		//Var:
		//	variable=[ReferenceTarget|IDF] | variable=[ReferenceTarget|IDF] => '[' index=Expr ']' ('.' attribute=IDF)? |
		//	variable=[ReferenceTarget|IDF] => '.' attribute=IDF;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[ReferenceTarget|IDF] | variable=[ReferenceTarget|IDF] => '[' index=Expr ']' ('.' attribute=IDF)? |
		//variable=[ReferenceTarget|IDF] => '.' attribute=IDF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=[ReferenceTarget|IDF]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[ReferenceTarget|IDF]
		public CrossReference getVariableReferenceTargetCrossReference_0_0() { return cVariableReferenceTargetCrossReference_0_0; }
		
		//IDF
		public RuleCall getVariableReferenceTargetIDFTerminalRuleCall_0_0_1() { return cVariableReferenceTargetIDFTerminalRuleCall_0_0_1; }
		
		//variable=[ReferenceTarget|IDF] => '[' index=Expr ']' ('.' attribute=IDF)?
		public Group getGroup_1() { return cGroup_1; }
		
		//variable=[ReferenceTarget|IDF]
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }
		
		//[ReferenceTarget|IDF]
		public CrossReference getVariableReferenceTargetCrossReference_1_0_0() { return cVariableReferenceTargetCrossReference_1_0_0; }
		
		//IDF
		public RuleCall getVariableReferenceTargetIDFTerminalRuleCall_1_0_0_1() { return cVariableReferenceTargetIDFTerminalRuleCall_1_0_0_1; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//index=Expr
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_0() { return cIndexExprParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//('.' attribute=IDF)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'.'
		public Keyword getFullStopKeyword_1_4_0() { return cFullStopKeyword_1_4_0; }
		
		//attribute=IDF
		public Assignment getAttributeAssignment_1_4_1() { return cAttributeAssignment_1_4_1; }
		
		//IDF
		public RuleCall getAttributeIDFTerminalRuleCall_1_4_1_0() { return cAttributeIDFTerminalRuleCall_1_4_1_0; }
		
		//variable=[ReferenceTarget|IDF] => '.' attribute=IDF
		public Group getGroup_2() { return cGroup_2; }
		
		//variable=[ReferenceTarget|IDF]
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }
		
		//[ReferenceTarget|IDF]
		public CrossReference getVariableReferenceTargetCrossReference_2_0_0() { return cVariableReferenceTargetCrossReference_2_0_0; }
		
		//IDF
		public RuleCall getVariableReferenceTargetIDFTerminalRuleCall_2_0_0_1() { return cVariableReferenceTargetIDFTerminalRuleCall_2_0_0_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//attribute=IDF
		public Assignment getAttributeAssignment_2_2() { return cAttributeAssignment_2_2; }
		
		//IDF
		public RuleCall getAttributeIDFTerminalRuleCall_2_2_0() { return cAttributeIDFTerminalRuleCall_2_2_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.Expr");
		private final RuleCall cOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	OrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpr
		public RuleCall getOrExprParserRuleCall() { return cOrExprParserRuleCall; }
	}
	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBoolExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpr Expr:
		//	BoolExpr ({BinaryExpr.left=current} op='||' right=BoolExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolExpr ({BinaryExpr.left=current} op='||' right=BoolExpr)*
		public Group getGroup() { return cGroup; }
		
		//BoolExpr
		public RuleCall getBoolExprParserRuleCall_0() { return cBoolExprParserRuleCall_0; }
		
		//({BinaryExpr.left=current} op='||' right=BoolExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0() { return cBinaryExprLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=BoolExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BoolExpr
		public RuleCall getRightBoolExprParserRuleCall_1_2_0() { return cRightBoolExprParserRuleCall_1_2_0; }
	}
	public class BoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.BoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BoolExpr Expr:
		//	RelExpr ({BinaryExpr.left=current} op='&&' right=RelExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelExpr ({BinaryExpr.left=current} op='&&' right=RelExpr)*
		public Group getGroup() { return cGroup; }
		
		//RelExpr
		public RuleCall getRelExprParserRuleCall_0() { return cRelExprParserRuleCall_0; }
		
		//({BinaryExpr.left=current} op='&&' right=RelExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0() { return cBinaryExprLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=RelExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelExpr
		public RuleCall getRightRelExprParserRuleCall_1_2_0() { return cRightRelExprParserRuleCall_1_2_0; }
	}
	public class RelExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.RelExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelExpr Expr:
		//	AddExpr ({BinaryExpr.left=current} op=('==' | '<' | '<=') right=AddExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddExpr ({BinaryExpr.left=current} op=('==' | '<' | '<=') right=AddExpr)*
		public Group getGroup() { return cGroup; }
		
		//AddExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }
		
		//({BinaryExpr.left=current} op=('==' | '<' | '<=') right=AddExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0() { return cBinaryExprLeftAction_1_0; }
		
		//op=('==' | '<' | '<=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '<' | '<=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_1() { return cOpLessThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//right=AddExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddExpr
		public RuleCall getRightAddExprParserRuleCall_1_2_0() { return cRightAddExprParserRuleCall_1_2_0; }
	}
	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.AddExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExpr Expr:
		//	MulExpr ({BinaryExpr.left=current} op=('+' | '-') right=MulExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulExpr ({BinaryExpr.left=current} op=('+' | '-') right=MulExpr)*
		public Group getGroup() { return cGroup; }
		
		//MulExpr
		public RuleCall getMulExprParserRuleCall_0() { return cMulExprParserRuleCall_0; }
		
		//({BinaryExpr.left=current} op=('+' | '-') right=MulExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0() { return cBinaryExprLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MulExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulExpr
		public RuleCall getRightMulExprParserRuleCall_1_2_0() { return cRightMulExprParserRuleCall_1_2_0; }
	}
	public class MulExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.MulExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulExpr Expr:
		//	SimpleExpr ({BinaryExpr.left=current} op=('*' | '/') right=SimpleExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExpr ({BinaryExpr.left=current} op=('*' | '/') right=SimpleExpr)*
		public Group getGroup() { return cGroup; }
		
		//SimpleExpr
		public RuleCall getSimpleExprParserRuleCall_0() { return cSimpleExprParserRuleCall_0; }
		
		//({BinaryExpr.left=current} op=('*' | '/') right=SimpleExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0() { return cBinaryExprLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=SimpleExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SimpleExpr
		public RuleCall getRightSimpleExprParserRuleCall_1_2_0() { return cRightSimpleExprParserRuleCall_1_2_0; }
	}
	public class SimpleExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.SimpleExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cVarExprParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cTouchExprToucherAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cTouchesKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cToucheeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cToucheeVarExprParserRuleCall_2_1_2_0 = (RuleCall)cToucheeAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExprParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SimpleExpr Expr:
		//	UnaryExpr
		//	| NumberExpr
		//	| VarExpr ({TouchExpr.toucher=current} 'touches' touchee=VarExpr)?
		//	| '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr | NumberExpr | VarExpr ({TouchExpr.toucher=current} 'touches' touchee=VarExpr)? | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//NumberExpr
		public RuleCall getNumberExprParserRuleCall_1() { return cNumberExprParserRuleCall_1; }
		
		//VarExpr ({TouchExpr.toucher=current} 'touches' touchee=VarExpr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//VarExpr
		public RuleCall getVarExprParserRuleCall_2_0() { return cVarExprParserRuleCall_2_0; }
		
		//({TouchExpr.toucher=current} 'touches' touchee=VarExpr)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{TouchExpr.toucher=current}
		public Action getTouchExprToucherAction_2_1_0() { return cTouchExprToucherAction_2_1_0; }
		
		//'touches'
		public Keyword getTouchesKeyword_2_1_1() { return cTouchesKeyword_2_1_1; }
		
		//touchee=VarExpr
		public Assignment getToucheeAssignment_2_1_2() { return cToucheeAssignment_2_1_2; }
		
		//VarExpr
		public RuleCall getToucheeVarExprParserRuleCall_2_1_2_0() { return cToucheeVarExprParserRuleCall_2_1_2_0; }
		
		//'(' Expr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_3_1() { return cExprParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandSimpleExprParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//UnaryExpr:
		//	op=('-' | '!') operand=SimpleExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//op=('-' | '!') operand=SimpleExpr
		public Group getGroup() { return cGroup; }
		
		//op=('-' | '!')
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//('-' | '!')
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_0_0() { return cOpHyphenMinusKeyword_0_0_0; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_0_0_1() { return cOpExclamationMarkKeyword_0_0_1; }
		
		//operand=SimpleExpr
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//SimpleExpr
		public RuleCall getOperandSimpleExprParserRuleCall_1_0() { return cOperandSimpleExprParserRuleCall_1_0; }
	}
	public class NumberExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.NumberExpr");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//NumberExpr:
		//	number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT
		public Assignment getNumberAssignment() { return cNumberAssignment; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0() { return cNumberINTTerminalRuleCall_0; }
	}
	public class VarExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.VarExpr");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//VarExpr:
		//	var=Var;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Var
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_0() { return cVarVarParserRuleCall_0; }
	}
	
	public class ObjTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.ObjType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRECTANGLEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRECTANGLERectangleKeyword_0_0 = (Keyword)cRECTANGLEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRIANGLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRIANGLETriangleKeyword_1_0 = (Keyword)cTRIANGLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCIRCLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCIRCLECircleKeyword_2_0 = (Keyword)cCIRCLEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ObjType:
		//	RECTANGLE='rectangle' | TRIANGLE='triangle' | CIRCLE='circle';
		public EnumRule getRule() { return rule; }
		
		//RECTANGLE='rectangle' | TRIANGLE='triangle' | CIRCLE='circle'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RECTANGLE='rectangle'
		public EnumLiteralDeclaration getRECTANGLEEnumLiteralDeclaration_0() { return cRECTANGLEEnumLiteralDeclaration_0; }
		
		//'rectangle'
		public Keyword getRECTANGLERectangleKeyword_0_0() { return cRECTANGLERectangleKeyword_0_0; }
		
		//TRIANGLE='triangle'
		public EnumLiteralDeclaration getTRIANGLEEnumLiteralDeclaration_1() { return cTRIANGLEEnumLiteralDeclaration_1; }
		
		//'triangle'
		public Keyword getTRIANGLETriangleKeyword_1_0() { return cTRIANGLETriangleKeyword_1_0; }
		
		//CIRCLE='circle'
		public EnumLiteralDeclaration getCIRCLEEnumLiteralDeclaration_2() { return cCIRCLEEnumLiteralDeclaration_2; }
		
		//'circle'
		public Keyword getCIRCLECircleKeyword_2_0() { return cCIRCLECircleKeyword_2_0; }
	}
	public class KeyStrokeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.KeyStroke");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSPACEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSPACESpaceKeyword_0_0 = (Keyword)cSPACEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFT_ARROWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFT_ARROWLeftarrowKeyword_1_0 = (Keyword)cLEFT_ARROWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_ARROWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHT_ARROWRightarrowKeyword_2_0 = (Keyword)cRIGHT_ARROWEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUP_ARROWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUP_ARROWUparrowKeyword_3_0 = (Keyword)cUP_ARROWEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDOWN_ARROWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDOWN_ARROWDownarrowKeyword_4_0 = (Keyword)cDOWN_ARROWEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum KeyStroke:
		//	SPACE='space' | LEFT_ARROW='leftarrow' | RIGHT_ARROW='rightarrow' | UP_ARROW='uparrow' | DOWN_ARROW='downarrow';
		public EnumRule getRule() { return rule; }
		
		//SPACE='space' | LEFT_ARROW='leftarrow' | RIGHT_ARROW='rightarrow' | UP_ARROW='uparrow' | DOWN_ARROW='downarrow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPACE='space'
		public EnumLiteralDeclaration getSPACEEnumLiteralDeclaration_0() { return cSPACEEnumLiteralDeclaration_0; }
		
		//'space'
		public Keyword getSPACESpaceKeyword_0_0() { return cSPACESpaceKeyword_0_0; }
		
		//LEFT_ARROW='leftarrow'
		public EnumLiteralDeclaration getLEFT_ARROWEnumLiteralDeclaration_1() { return cLEFT_ARROWEnumLiteralDeclaration_1; }
		
		//'leftarrow'
		public Keyword getLEFT_ARROWLeftarrowKeyword_1_0() { return cLEFT_ARROWLeftarrowKeyword_1_0; }
		
		//RIGHT_ARROW='rightarrow'
		public EnumLiteralDeclaration getRIGHT_ARROWEnumLiteralDeclaration_2() { return cRIGHT_ARROWEnumLiteralDeclaration_2; }
		
		//'rightarrow'
		public Keyword getRIGHT_ARROWRightarrowKeyword_2_0() { return cRIGHT_ARROWRightarrowKeyword_2_0; }
		
		//UP_ARROW='uparrow'
		public EnumLiteralDeclaration getUP_ARROWEnumLiteralDeclaration_3() { return cUP_ARROWEnumLiteralDeclaration_3; }
		
		//'uparrow'
		public Keyword getUP_ARROWUparrowKeyword_3_0() { return cUP_ARROWUparrowKeyword_3_0; }
		
		//DOWN_ARROW='downarrow'
		public EnumLiteralDeclaration getDOWN_ARROWEnumLiteralDeclaration_4() { return cDOWN_ARROWEnumLiteralDeclaration_4; }
		
		//'downarrow'
		public Keyword getDOWN_ARROWDownarrowKeyword_4_0() { return cDOWN_ARROWDownarrowKeyword_4_0; }
	}
	
	private final ProgramElements pProgram;
	private final ReferenceTargetElements pReferenceTarget;
	private final DeclElements pDecl;
	private final VarDeclElements pVarDecl;
	private final ScalarVarDeclElements pScalarVarDecl;
	private final ArrayVarDeclElements pArrayVarDecl;
	private final ObjDeclElements pObjDecl;
	private final ObjArrayDeclElements pObjArrayDecl;
	private final ObjTypeElements eObjType;
	private final AttrAssListElements pAttrAssList;
	private final AttrAssElements pAttrAss;
	private final BlockElements pBlock;
	private final AnimBlockElements pAnimBlock;
	private final AnimTargetElements pAnimTarget;
	private final EventBlockElements pEventBlock;
	private final KeyStrokeElements eKeyStroke;
	private final StmtBlockElements pStmtBlock;
	private final StmtElements pStmt;
	private final IfStmtElements pIfStmt;
	private final ForStmtElements pForStmt;
	private final AssignmentElements pAssignment;
	private final AssStmtElements pAssStmt;
	private final VarElements pVar;
	private final ExprElements pExpr;
	private final OrExprElements pOrExpr;
	private final BoolExprElements pBoolExpr;
	private final RelExprElements pRelExpr;
	private final AddExprElements pAddExpr;
	private final MulExprElements pMulExpr;
	private final SimpleExprElements pSimpleExpr;
	private final UnaryExprElements pUnaryExpr;
	private final NumberExprElements pNumberExpr;
	private final VarExprElements pVarExpr;
	private final TerminalRule tIDF;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MGPLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pReferenceTarget = new ReferenceTargetElements();
		this.pDecl = new DeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pScalarVarDecl = new ScalarVarDeclElements();
		this.pArrayVarDecl = new ArrayVarDeclElements();
		this.pObjDecl = new ObjDeclElements();
		this.pObjArrayDecl = new ObjArrayDeclElements();
		this.eObjType = new ObjTypeElements();
		this.pAttrAssList = new AttrAssListElements();
		this.pAttrAss = new AttrAssElements();
		this.pBlock = new BlockElements();
		this.pAnimBlock = new AnimBlockElements();
		this.pAnimTarget = new AnimTargetElements();
		this.pEventBlock = new EventBlockElements();
		this.eKeyStroke = new KeyStrokeElements();
		this.pStmtBlock = new StmtBlockElements();
		this.pStmt = new StmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pAssStmt = new AssStmtElements();
		this.pVar = new VarElements();
		this.pExpr = new ExprElements();
		this.pOrExpr = new OrExprElements();
		this.pBoolExpr = new BoolExprElements();
		this.pRelExpr = new RelExprElements();
		this.pAddExpr = new AddExprElements();
		this.pMulExpr = new MulExprElements();
		this.pSimpleExpr = new SimpleExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pNumberExpr = new NumberExprElements();
		this.pVarExpr = new VarExprElements();
		this.tIDF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_dortmund.MGPL.IDF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_dortmund.MGPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'game' name=IDF
	//	'(' attributes=AttrAssList? ')'
	//	declarations+=Decl*
	//	init=StmtBlock
	//	blocks+=Block*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//ReferenceTarget:
	//	Program | Decl | AnimBlock | AnimTarget;
	public ReferenceTargetElements getReferenceTargetAccess() {
		return pReferenceTarget;
	}
	
	public ParserRule getReferenceTargetRule() {
		return getReferenceTargetAccess().getRule();
	}
	
	//Decl:
	//	(ObjDecl | ObjArrayDecl | VarDecl) ';';
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//VarDecl:
	//	ScalarVarDecl | ArrayVarDecl;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//ScalarVarDecl:
	//	'int' name=IDF ('=' initialization=Expr)?;
	public ScalarVarDeclElements getScalarVarDeclAccess() {
		return pScalarVarDecl;
	}
	
	public ParserRule getScalarVarDeclRule() {
		return getScalarVarDeclAccess().getRule();
	}
	
	//ArrayVarDecl:
	//	'int' name=IDF '[' size=INT ']';
	public ArrayVarDeclElements getArrayVarDeclAccess() {
		return pArrayVarDecl;
	}
	
	public ParserRule getArrayVarDeclRule() {
		return getArrayVarDeclAccess().getRule();
	}
	
	//ObjDecl:
	//	type=ObjType name=IDF '(' attributes=AttrAssList? ')';
	public ObjDeclElements getObjDeclAccess() {
		return pObjDecl;
	}
	
	public ParserRule getObjDeclRule() {
		return getObjDeclAccess().getRule();
	}
	
	//ObjArrayDecl:
	//	type=ObjType name=IDF '[' size=INT ']';
	public ObjArrayDeclElements getObjArrayDeclAccess() {
		return pObjArrayDecl;
	}
	
	public ParserRule getObjArrayDeclRule() {
		return getObjArrayDeclAccess().getRule();
	}
	
	//enum ObjType:
	//	RECTANGLE='rectangle' | TRIANGLE='triangle' | CIRCLE='circle';
	public ObjTypeElements getObjTypeAccess() {
		return eObjType;
	}
	
	public EnumRule getObjTypeRule() {
		return getObjTypeAccess().getRule();
	}
	
	//AttrAssList:
	//	assignments+=AttrAss (',' assignments+=AttrAss)*;
	public AttrAssListElements getAttrAssListAccess() {
		return pAttrAssList;
	}
	
	public ParserRule getAttrAssListRule() {
		return getAttrAssListAccess().getRule();
	}
	
	//AttrAss:
	//	attributeName=IDF '=' value=Expr;
	public AttrAssElements getAttrAssAccess() {
		return pAttrAss;
	}
	
	public ParserRule getAttrAssRule() {
		return getAttrAssAccess().getRule();
	}
	
	//Block:
	//	AnimBlock | EventBlock;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//AnimBlock:
	//	'animation' name=IDF '(' target=AnimTarget ')' action=StmtBlock;
	public AnimBlockElements getAnimBlockAccess() {
		return pAnimBlock;
	}
	
	public ParserRule getAnimBlockRule() {
		return getAnimBlockAccess().getRule();
	}
	
	//AnimTarget:
	//	type=ObjType name=IDF;
	public AnimTargetElements getAnimTargetAccess() {
		return pAnimTarget;
	}
	
	public ParserRule getAnimTargetRule() {
		return getAnimTargetAccess().getRule();
	}
	
	//EventBlock:
	//	'on' key=KeyStroke action=StmtBlock;
	public EventBlockElements getEventBlockAccess() {
		return pEventBlock;
	}
	
	public ParserRule getEventBlockRule() {
		return getEventBlockAccess().getRule();
	}
	
	//enum KeyStroke:
	//	SPACE='space' | LEFT_ARROW='leftarrow' | RIGHT_ARROW='rightarrow' | UP_ARROW='uparrow' | DOWN_ARROW='downarrow';
	public KeyStrokeElements getKeyStrokeAccess() {
		return eKeyStroke;
	}
	
	public EnumRule getKeyStrokeRule() {
		return getKeyStrokeAccess().getRule();
	}
	
	//StmtBlock:
	//	'{' {StmtBlock} statements+=Stmt* '}';
	public StmtBlockElements getStmtBlockAccess() {
		return pStmtBlock;
	}
	
	public ParserRule getStmtBlockRule() {
		return getStmtBlockAccess().getRule();
	}
	
	//Stmt:
	//	IfStmt | ForStmt | AssStmt;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//IfStmt:
	//	'if' '(' condition=Expr ')' then=StmtBlock (=> 'else' else=StmtBlock)?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//ForStmt:
	//	'for' '(' init=Assignment ';' condition=Expr ';' step=Assignment ')' body=StmtBlock;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//Assignment:
	//	var=Var '=' value=Expr;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//AssStmt:
	//	Assignment ';';
	public AssStmtElements getAssStmtAccess() {
		return pAssStmt;
	}
	
	public ParserRule getAssStmtRule() {
		return getAssStmtAccess().getRule();
	}
	
	//Var:
	//	variable=[ReferenceTarget|IDF] | variable=[ReferenceTarget|IDF] => '[' index=Expr ']' ('.' attribute=IDF)? |
	//	variable=[ReferenceTarget|IDF] => '.' attribute=IDF;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Expr:
	//	OrExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//OrExpr Expr:
	//	BoolExpr ({BinaryExpr.left=current} op='||' right=BoolExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}
	
	//BoolExpr Expr:
	//	RelExpr ({BinaryExpr.left=current} op='&&' right=RelExpr)*;
	public BoolExprElements getBoolExprAccess() {
		return pBoolExpr;
	}
	
	public ParserRule getBoolExprRule() {
		return getBoolExprAccess().getRule();
	}
	
	//RelExpr Expr:
	//	AddExpr ({BinaryExpr.left=current} op=('==' | '<' | '<=') right=AddExpr)*;
	public RelExprElements getRelExprAccess() {
		return pRelExpr;
	}
	
	public ParserRule getRelExprRule() {
		return getRelExprAccess().getRule();
	}
	
	//AddExpr Expr:
	//	MulExpr ({BinaryExpr.left=current} op=('+' | '-') right=MulExpr)*;
	public AddExprElements getAddExprAccess() {
		return pAddExpr;
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}
	
	//MulExpr Expr:
	//	SimpleExpr ({BinaryExpr.left=current} op=('*' | '/') right=SimpleExpr)*;
	public MulExprElements getMulExprAccess() {
		return pMulExpr;
	}
	
	public ParserRule getMulExprRule() {
		return getMulExprAccess().getRule();
	}
	
	//SimpleExpr Expr:
	//	UnaryExpr
	//	| NumberExpr
	//	| VarExpr ({TouchExpr.toucher=current} 'touches' touchee=VarExpr)?
	//	| '(' Expr ')';
	public SimpleExprElements getSimpleExprAccess() {
		return pSimpleExpr;
	}
	
	public ParserRule getSimpleExprRule() {
		return getSimpleExprAccess().getRule();
	}
	
	//UnaryExpr:
	//	op=('-' | '!') operand=SimpleExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//NumberExpr:
	//	number=INT;
	public NumberExprElements getNumberExprAccess() {
		return pNumberExpr;
	}
	
	public ParserRule getNumberExprRule() {
		return getNumberExprAccess().getRule();
	}
	
	//VarExpr:
	//	var=Var;
	public VarExprElements getVarExprAccess() {
		return pVarExpr;
	}
	
	public ParserRule getVarExprRule() {
		return getVarExprAccess().getRule();
	}
	
	//terminal IDF:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDFRule() {
		return tIDF;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
