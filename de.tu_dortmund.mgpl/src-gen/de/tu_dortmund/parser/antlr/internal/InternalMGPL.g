/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGPL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.tu_dortmund.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.tu_dortmund.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.tu_dortmund.services.MGPLGrammarAccess;

}

@parser::members {

 	private MGPLGrammarAccess grammarAccess;

    public InternalMGPLParser(TokenStream input, MGPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MGPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='game'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getGameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getAttributesAttrAssListParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttrAssList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_3_0,
						"de.tu_dortmund.MGPL.AttrAssList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getDeclarationsDeclParserRuleCall_5_0());
				}
				lv_declarations_5_0=ruleDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_5_0,
						"de.tu_dortmund.MGPL.Decl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getInitStmtBlockParserRuleCall_6_0());
				}
				lv_init_6_0=ruleStmtBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"init",
						lv_init_6_0,
						"de.tu_dortmund.MGPL.StmtBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_7_0());
				}
				lv_blocks_7_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"blocks",
						lv_blocks_7_0,
						"de.tu_dortmund.MGPL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	iv_ruleDecl=ruleDecl
	{ $current=$iv_ruleDecl.current; }
	EOF;

// Rule Decl
ruleDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclAccess().getObjDeclParserRuleCall_0_0());
			}
			this_ObjDecl_0=ruleObjDecl
			{
				$current = $this_ObjDecl_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getDeclAccess().getObjArrayDeclParserRuleCall_0_1());
			}
			this_ObjArrayDecl_1=ruleObjArrayDecl
			{
				$current = $this_ObjArrayDecl_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getDeclAccess().getVarDeclParserRuleCall_0_2());
			}
			this_VarDecl_2=ruleVarDecl
			{
				$current = $this_VarDecl_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeclAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_ruleVarDecl=ruleVarDecl
	{ $current=$iv_ruleVarDecl.current; }
	EOF;

// Rule VarDecl
ruleVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarDeclAccess().getScalarVarDeclParserRuleCall_0());
		}
		this_ScalarVarDecl_0=ruleScalarVarDecl
		{
			$current = $this_ScalarVarDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVarDeclAccess().getArrayVarDeclParserRuleCall_1());
		}
		this_ArrayVarDecl_1=ruleArrayVarDecl
		{
			$current = $this_ArrayVarDecl_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScalarVarDecl
entryRuleScalarVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarVarDeclRule()); }
	iv_ruleScalarVarDecl=ruleScalarVarDecl
	{ $current=$iv_ruleScalarVarDecl.current; }
	EOF;

// Rule ScalarVarDecl
ruleScalarVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='int'
		{
			newLeafNode(otherlv_0, grammarAccess.getScalarVarDeclAccess().getIntKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScalarVarDeclAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScalarVarDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getScalarVarDeclAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScalarVarDeclAccess().getInitializationExprParserRuleCall_2_1_0());
					}
					lv_initialization_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScalarVarDeclRule());
						}
						set(
							$current,
							"initialization",
							lv_initialization_3_0,
							"de.tu_dortmund.MGPL.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArrayVarDecl
entryRuleArrayVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayVarDeclRule()); }
	iv_ruleArrayVarDecl=ruleArrayVarDecl
	{ $current=$iv_ruleArrayVarDecl.current; }
	EOF;

// Rule ArrayVarDecl
ruleArrayVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='int'
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayVarDeclAccess().getIntKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArrayVarDeclAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayVarDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayVarDeclAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_size_3_0=RULE_INT
				{
					newLeafNode(lv_size_3_0, grammarAccess.getArrayVarDeclAccess().getSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayVarDeclRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayVarDeclAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleObjDecl
entryRuleObjDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjDeclRule()); }
	iv_ruleObjDecl=ruleObjDecl
	{ $current=$iv_ruleObjDecl.current; }
	EOF;

// Rule ObjDecl
ruleObjDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjDeclAccess().getTypeObjTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleObjType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.tu_dortmund.MGPL.ObjType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjDeclAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getObjDeclAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjDeclAccess().getAttributesAttrAssListParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttrAssList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjDeclRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_3_0,
						"de.tu_dortmund.MGPL.AttrAssList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getObjDeclAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleObjArrayDecl
entryRuleObjArrayDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjArrayDeclRule()); }
	iv_ruleObjArrayDecl=ruleObjArrayDecl
	{ $current=$iv_ruleObjArrayDecl.current; }
	EOF;

// Rule ObjArrayDecl
ruleObjArrayDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjArrayDeclAccess().getTypeObjTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleObjType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjArrayDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.tu_dortmund.MGPL.ObjType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjArrayDeclAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjArrayDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getObjArrayDeclAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_size_3_0=RULE_INT
				{
					newLeafNode(lv_size_3_0, grammarAccess.getObjArrayDeclAccess().getSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjArrayDeclRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getObjArrayDeclAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAttrAssList
entryRuleAttrAssList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrAssListRule()); }
	iv_ruleAttrAssList=ruleAttrAssList
	{ $current=$iv_ruleAttrAssList.current; }
	EOF;

// Rule AttrAssList
ruleAttrAssList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrAssListAccess().getAssignmentsAttrAssParserRuleCall_0_0());
				}
				lv_assignments_0_0=ruleAttrAss
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrAssListRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_0_0,
						"de.tu_dortmund.MGPL.AttrAss");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getAttrAssListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrAssListAccess().getAssignmentsAttrAssParserRuleCall_1_1_0());
					}
					lv_assignments_2_0=ruleAttrAss
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrAssListRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_2_0,
							"de.tu_dortmund.MGPL.AttrAss");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAttrAss
entryRuleAttrAss returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrAssRule()); }
	iv_ruleAttrAss=ruleAttrAss
	{ $current=$iv_ruleAttrAss.current; }
	EOF;

// Rule AttrAss
ruleAttrAss returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_attributeName_0_0=RULE_IDF
				{
					newLeafNode(lv_attributeName_0_0, grammarAccess.getAttrAssAccess().getAttributeNameIDFTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttrAssRule());
					}
					setWithLastConsumed(
						$current,
						"attributeName",
						lv_attributeName_0_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttrAssAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrAssAccess().getValueExprParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrAssRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.tu_dortmund.MGPL.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockAccess().getAnimBlockParserRuleCall_0());
		}
		this_AnimBlock_0=ruleAnimBlock
		{
			$current = $this_AnimBlock_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getEventBlockParserRuleCall_1());
		}
		this_EventBlock_1=ruleEventBlock
		{
			$current = $this_EventBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnimBlock
entryRuleAnimBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnimBlockRule()); }
	iv_ruleAnimBlock=ruleAnimBlock
	{ $current=$iv_ruleAnimBlock.current; }
	EOF;

// Rule AnimBlock
ruleAnimBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='animation'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnimBlockAccess().getAnimationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnimBlockAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnimBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAnimBlockAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnimBlockAccess().getTargetAnimTargetParserRuleCall_3_0());
				}
				lv_target_3_0=ruleAnimTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnimBlockRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"de.tu_dortmund.MGPL.AnimTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAnimBlockAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnimBlockAccess().getActionStmtBlockParserRuleCall_5_0());
				}
				lv_action_5_0=ruleStmtBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnimBlockRule());
					}
					set(
						$current,
						"action",
						lv_action_5_0,
						"de.tu_dortmund.MGPL.StmtBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnimTarget
entryRuleAnimTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnimTargetRule()); }
	iv_ruleAnimTarget=ruleAnimTarget
	{ $current=$iv_ruleAnimTarget.current; }
	EOF;

// Rule AnimTarget
ruleAnimTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnimTargetAccess().getTypeObjTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleObjType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnimTargetRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.tu_dortmund.MGPL.ObjType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDF
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnimTargetAccess().getNameIDFTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnimTargetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.tu_dortmund.MGPL.IDF");
				}
			)
		)
	)
;

// Entry rule entryRuleEventBlock
entryRuleEventBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventBlockRule()); }
	iv_ruleEventBlock=ruleEventBlock
	{ $current=$iv_ruleEventBlock.current; }
	EOF;

// Rule EventBlock
ruleEventBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventBlockAccess().getOnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventBlockAccess().getKeyKeyStrokeEnumRuleCall_1_0());
				}
				lv_key_1_0=ruleKeyStroke
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventBlockRule());
					}
					set(
						$current,
						"key",
						lv_key_1_0,
						"de.tu_dortmund.MGPL.KeyStroke");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventBlockAccess().getActionStmtBlockParserRuleCall_2_0());
				}
				lv_action_2_0=ruleStmtBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventBlockRule());
					}
					set(
						$current,
						"action",
						lv_action_2_0,
						"de.tu_dortmund.MGPL.StmtBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStmtBlock
entryRuleStmtBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtBlockRule()); }
	iv_ruleStmtBlock=ruleStmtBlock
	{ $current=$iv_ruleStmtBlock.current; }
	EOF;

// Rule StmtBlock
ruleStmtBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getStmtBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStmtBlockAccess().getStmtBlockAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStmtBlockAccess().getStatementsStmtParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStmtBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"de.tu_dortmund.MGPL.Stmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getStmtBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	iv_ruleStmt=ruleStmt
	{ $current=$iv_ruleStmt.current; }
	EOF;

// Rule Stmt
ruleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStmtAccess().getIfStmtParserRuleCall_0());
		}
		this_IfStmt_0=ruleIfStmt
		{
			$current = $this_IfStmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getForStmtParserRuleCall_1());
		}
		this_ForStmt_1=ruleForStmt
		{
			$current = $this_ForStmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getAssStmtParserRuleCall_2());
		}
		this_AssStmt_2=ruleAssStmt
		{
			$current = $this_AssStmt_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfStmt
entryRuleIfStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleIfStmt=ruleIfStmt
	{ $current=$iv_ruleIfStmt.current; }
	EOF;

// Rule IfStmt
ruleIfStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStmtAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getConditionExprParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"de.tu_dortmund.MGPL.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStmtAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getThenStmtBlockParserRuleCall_4_0());
				}
				lv_then_4_0=ruleStmtBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"de.tu_dortmund.MGPL.StmtBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfStmtAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStmtAccess().getElseStmtBlockParserRuleCall_5_1_0());
					}
					lv_else_6_0=ruleStmtBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStmtRule());
						}
						set(
							$current,
							"else",
							lv_else_6_0,
							"de.tu_dortmund.MGPL.StmtBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleForStmt
entryRuleForStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleForStmt=ruleForStmt
	{ $current=$iv_ruleForStmt.current; }
	EOF;

// Rule ForStmt
ruleForStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForStmtAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getInitAssignmentParserRuleCall_2_0());
				}
				lv_init_2_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"init",
						lv_init_2_0,
						"de.tu_dortmund.MGPL.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getForStmtAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getConditionExprParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"de.tu_dortmund.MGPL.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForStmtAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getStepAssignmentParserRuleCall_6_0());
				}
				lv_step_6_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"step",
						lv_step_6_0,
						"de.tu_dortmund.MGPL.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForStmtAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getBodyStmtBlockParserRuleCall_8_0());
				}
				lv_body_8_0=ruleStmtBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"de.tu_dortmund.MGPL.StmtBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getVarVarParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"de.tu_dortmund.MGPL.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueExprParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.tu_dortmund.MGPL.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssStmt
entryRuleAssStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssStmtRule()); }
	iv_ruleAssStmt=ruleAssStmt
	{ $current=$iv_ruleAssStmt.current; }
	EOF;

// Rule AssStmt
ruleAssStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssStmtAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssStmtAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRule());
					}
				}
				otherlv_0=RULE_IDF
				{
					newLeafNode(otherlv_0, grammarAccess.getVarAccess().getVariableReferenceTargetCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRule());
						}
					}
					otherlv_1=RULE_IDF
					{
						newLeafNode(otherlv_1, grammarAccess.getVarAccess().getVariableReferenceTargetCrossReference_1_0_0());
					}
				)
			)
			(
				('[')=>
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getVarAccess().getLeftSquareBracketKeyword_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVarAccess().getIndexExprParserRuleCall_1_2_0());
					}
					lv_index_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarRule());
						}
						set(
							$current,
							"index",
							lv_index_3_0,
							"de.tu_dortmund.MGPL.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getVarAccess().getRightSquareBracketKeyword_1_3());
			}
			(
				otherlv_5='.'
				{
					newLeafNode(otherlv_5, grammarAccess.getVarAccess().getFullStopKeyword_1_4_0());
				}
				(
					(
						lv_attribute_6_0=RULE_IDF
						{
							newLeafNode(lv_attribute_6_0, grammarAccess.getVarAccess().getAttributeIDFTerminalRuleCall_1_4_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarRule());
							}
							setWithLastConsumed(
								$current,
								"attribute",
								lv_attribute_6_0,
								"de.tu_dortmund.MGPL.IDF");
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRule());
						}
					}
					otherlv_7=RULE_IDF
					{
						newLeafNode(otherlv_7, grammarAccess.getVarAccess().getVariableReferenceTargetCrossReference_2_0_0());
					}
				)
			)
			(
				('.')=>
				otherlv_8='.'
				{
					newLeafNode(otherlv_8, grammarAccess.getVarAccess().getFullStopKeyword_2_1());
				}
			)
			(
				(
					lv_attribute_9_0=RULE_IDF
					{
						newLeafNode(lv_attribute_9_0, grammarAccess.getVarAccess().getAttributeIDFTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRule());
						}
						setWithLastConsumed(
							$current,
							"attribute",
							lv_attribute_9_0,
							"de.tu_dortmund.MGPL.IDF");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExprAccess().getOrExprParserRuleCall());
	}
	this_OrExpr_0=ruleOrExpr
	{
		$current = $this_OrExpr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	iv_ruleOrExpr=ruleOrExpr
	{ $current=$iv_ruleOrExpr.current; }
	EOF;

// Rule OrExpr
ruleOrExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExprAccess().getBoolExprParserRuleCall_0());
		}
		this_BoolExpr_0=ruleBoolExpr
		{
			$current = $this_BoolExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='||'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "||");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExprAccess().getRightBoolExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBoolExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.tu_dortmund.MGPL.BoolExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolExpr
entryRuleBoolExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExprRule()); }
	iv_ruleBoolExpr=ruleBoolExpr
	{ $current=$iv_ruleBoolExpr.current; }
	EOF;

// Rule BoolExpr
ruleBoolExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolExprAccess().getRelExprParserRuleCall_0());
		}
		this_RelExpr_0=ruleRelExpr
		{
			$current = $this_RelExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBoolExprAccess().getBinaryExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='&&'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBoolExprAccess().getOpAmpersandAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "&&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExprAccess().getRightRelExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.tu_dortmund.MGPL.RelExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelExpr
entryRuleRelExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelExprRule()); }
	iv_ruleRelExpr=ruleRelExpr
	{ $current=$iv_ruleRelExpr.current; }
	EOF;

// Rule RelExpr
ruleRelExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelExprAccess().getAddExprParserRuleCall_0());
		}
		this_AddExpr_0=ruleAddExpr
		{
			$current = $this_AddExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelExprAccess().getBinaryExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getRelExprAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getRelExprAccess().getOpLessThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='<='
						{
							newLeafNode(lv_op_2_3, grammarAccess.getRelExprAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelExprAccess().getRightAddExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.tu_dortmund.MGPL.AddExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddExpr
entryRuleAddExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExprRule()); }
	iv_ruleAddExpr=ruleAddExpr
	{ $current=$iv_ruleAddExpr.current; }
	EOF;

// Rule AddExpr
ruleAddExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExprAccess().getMulExprParserRuleCall_0());
		}
		this_MulExpr_0=ruleMulExpr
		{
			$current = $this_MulExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddExprAccess().getBinaryExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='+'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getAddExprAccess().getOpPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='-'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getAddExprAccess().getOpHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExprAccess().getRightMulExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.tu_dortmund.MGPL.MulExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulExpr
entryRuleMulExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulExprRule()); }
	iv_ruleMulExpr=ruleMulExpr
	{ $current=$iv_ruleMulExpr.current; }
	EOF;

// Rule MulExpr
ruleMulExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulExprAccess().getSimpleExprParserRuleCall_0());
		}
		this_SimpleExpr_0=ruleSimpleExpr
		{
			$current = $this_SimpleExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulExprAccess().getBinaryExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMulExprAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMulExprAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulExprAccess().getRightSimpleExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSimpleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.tu_dortmund.MGPL.SimpleExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSimpleExpr
entryRuleSimpleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExprRule()); }
	iv_ruleSimpleExpr=ruleSimpleExpr
	{ $current=$iv_ruleSimpleExpr.current; }
	EOF;

// Rule SimpleExpr
ruleSimpleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleExprAccess().getUnaryExprParserRuleCall_0());
		}
		this_UnaryExpr_0=ruleUnaryExpr
		{
			$current = $this_UnaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleExprAccess().getNumberExprParserRuleCall_1());
		}
		this_NumberExpr_1=ruleNumberExpr
		{
			$current = $this_NumberExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getSimpleExprAccess().getVarExprParserRuleCall_2_0());
			}
			this_VarExpr_2=ruleVarExpr
			{
				$current = $this_VarExpr_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSimpleExprAccess().getTouchExprToucherAction_2_1_0(),
							$current);
					}
				)
				otherlv_4='touches'
				{
					newLeafNode(otherlv_4, grammarAccess.getSimpleExprAccess().getTouchesKeyword_2_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleExprAccess().getToucheeVarExprParserRuleCall_2_1_2_0());
						}
						lv_touchee_5_0=ruleVarExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleExprRule());
							}
							set(
								$current,
								"touchee",
								lv_touchee_5_0,
								"de.tu_dortmund.MGPL.VarExpr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getSimpleExprAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getSimpleExprAccess().getExprParserRuleCall_3_1());
			}
			this_Expr_7=ruleExpr
			{
				$current = $this_Expr_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getSimpleExprAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleUnaryExpr=ruleUnaryExpr
	{ $current=$iv_ruleUnaryExpr.current; }
	EOF;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_1='-'
					{
						newLeafNode(lv_op_0_1, grammarAccess.getUnaryExprAccess().getOpHyphenMinusKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnaryExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_1, null);
					}
					    |
					lv_op_0_2='!'
					{
						newLeafNode(lv_op_0_2, grammarAccess.getUnaryExprAccess().getOpExclamationMarkKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnaryExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExprAccess().getOperandSimpleExprParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleSimpleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"de.tu_dortmund.MGPL.SimpleExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumberExpr
entryRuleNumberExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberExprRule()); }
	iv_ruleNumberExpr=ruleNumberExpr
	{ $current=$iv_ruleNumberExpr.current; }
	EOF;

// Rule NumberExpr
ruleNumberExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_number_0_0=RULE_INT
			{
				newLeafNode(lv_number_0_0, grammarAccess.getNumberExprAccess().getNumberINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberExprRule());
				}
				setWithLastConsumed(
					$current,
					"number",
					lv_number_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleVarExpr
entryRuleVarExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarExprRule()); }
	iv_ruleVarExpr=ruleVarExpr
	{ $current=$iv_ruleVarExpr.current; }
	EOF;

// Rule VarExpr
ruleVarExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVarExprAccess().getVarVarParserRuleCall_0());
			}
			lv_var_0_0=ruleVar
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVarExprRule());
				}
				set(
					$current,
					"var",
					lv_var_0_0,
					"de.tu_dortmund.MGPL.Var");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule ObjType
ruleObjType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='rectangle'
			{
				$current = grammarAccess.getObjTypeAccess().getRECTANGLEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getObjTypeAccess().getRECTANGLEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='triangle'
			{
				$current = grammarAccess.getObjTypeAccess().getTRIANGLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getObjTypeAccess().getTRIANGLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='circle'
			{
				$current = grammarAccess.getObjTypeAccess().getCIRCLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getObjTypeAccess().getCIRCLEEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule KeyStroke
ruleKeyStroke returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='space'
			{
				$current = grammarAccess.getKeyStrokeAccess().getSPACEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getKeyStrokeAccess().getSPACEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='leftarrow'
			{
				$current = grammarAccess.getKeyStrokeAccess().getLEFT_ARROWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getKeyStrokeAccess().getLEFT_ARROWEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='rightarrow'
			{
				$current = grammarAccess.getKeyStrokeAccess().getRIGHT_ARROWEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getKeyStrokeAccess().getRIGHT_ARROWEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='uparrow'
			{
				$current = grammarAccess.getKeyStrokeAccess().getUP_ARROWEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getKeyStrokeAccess().getUP_ARROWEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='downarrow'
			{
				$current = grammarAccess.getKeyStrokeAccess().getDOWN_ARROWEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getKeyStrokeAccess().getDOWN_ARROWEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_IDF : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
