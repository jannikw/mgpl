/**
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.mGPL.impl;

import de.tu_dortmund.mGPL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MGPLFactoryImpl extends EFactoryImpl implements MGPLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MGPLFactory init()
  {
    try
    {
      MGPLFactory theMGPLFactory = (MGPLFactory)EPackage.Registry.INSTANCE.getEFactory(MGPLPackage.eNS_URI);
      if (theMGPLFactory != null)
      {
        return theMGPLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MGPLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MGPLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MGPLPackage.PROGRAM: return createProgram();
      case MGPLPackage.REFERENCE_TARGET: return createReferenceTarget();
      case MGPLPackage.DECL: return createDecl();
      case MGPLPackage.VAR_DECL: return createVarDecl();
      case MGPLPackage.SCALAR_VAR_DECL: return createScalarVarDecl();
      case MGPLPackage.ARRAY_VAR_DECL: return createArrayVarDecl();
      case MGPLPackage.OBJ_DECL: return createObjDecl();
      case MGPLPackage.OBJ_ARRAY_DECL: return createObjArrayDecl();
      case MGPLPackage.ATTR_ASS_LIST: return createAttrAssList();
      case MGPLPackage.ATTR_ASS: return createAttrAss();
      case MGPLPackage.BLOCK: return createBlock();
      case MGPLPackage.ANIM_BLOCK: return createAnimBlock();
      case MGPLPackage.ANIM_TARGET: return createAnimTarget();
      case MGPLPackage.EVENT_BLOCK: return createEventBlock();
      case MGPLPackage.STMT_BLOCK: return createStmtBlock();
      case MGPLPackage.STMT: return createStmt();
      case MGPLPackage.IF_STMT: return createIfStmt();
      case MGPLPackage.FOR_STMT: return createForStmt();
      case MGPLPackage.ASSIGNMENT: return createAssignment();
      case MGPLPackage.ASS_STMT: return createAssStmt();
      case MGPLPackage.VAR: return createVar();
      case MGPLPackage.EXPR: return createExpr();
      case MGPLPackage.UNARY_EXPR: return createUnaryExpr();
      case MGPLPackage.NUMBER_EXPR: return createNumberExpr();
      case MGPLPackage.VAR_EXPR: return createVarExpr();
      case MGPLPackage.BINARY_EXPR: return createBinaryExpr();
      case MGPLPackage.TOUCH_EXPR: return createTouchExpr();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MGPLPackage.OBJ_TYPE:
        return createObjTypeFromString(eDataType, initialValue);
      case MGPLPackage.KEY_STROKE:
        return createKeyStrokeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MGPLPackage.OBJ_TYPE:
        return convertObjTypeToString(eDataType, instanceValue);
      case MGPLPackage.KEY_STROKE:
        return convertKeyStrokeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceTarget createReferenceTarget()
  {
    ReferenceTargetImpl referenceTarget = new ReferenceTargetImpl();
    return referenceTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decl createDecl()
  {
    DeclImpl decl = new DeclImpl();
    return decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScalarVarDecl createScalarVarDecl()
  {
    ScalarVarDeclImpl scalarVarDecl = new ScalarVarDeclImpl();
    return scalarVarDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayVarDecl createArrayVarDecl()
  {
    ArrayVarDeclImpl arrayVarDecl = new ArrayVarDeclImpl();
    return arrayVarDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjDecl createObjDecl()
  {
    ObjDeclImpl objDecl = new ObjDeclImpl();
    return objDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjArrayDecl createObjArrayDecl()
  {
    ObjArrayDeclImpl objArrayDecl = new ObjArrayDeclImpl();
    return objArrayDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrAssList createAttrAssList()
  {
    AttrAssListImpl attrAssList = new AttrAssListImpl();
    return attrAssList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrAss createAttrAss()
  {
    AttrAssImpl attrAss = new AttrAssImpl();
    return attrAss;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnimBlock createAnimBlock()
  {
    AnimBlockImpl animBlock = new AnimBlockImpl();
    return animBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnimTarget createAnimTarget()
  {
    AnimTargetImpl animTarget = new AnimTargetImpl();
    return animTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBlock createEventBlock()
  {
    EventBlockImpl eventBlock = new EventBlockImpl();
    return eventBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtBlock createStmtBlock()
  {
    StmtBlockImpl stmtBlock = new StmtBlockImpl();
    return stmtBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stmt createStmt()
  {
    StmtImpl stmt = new StmtImpl();
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStmt createIfStmt()
  {
    IfStmtImpl ifStmt = new IfStmtImpl();
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStmt createForStmt()
  {
    ForStmtImpl forStmt = new ForStmtImpl();
    return forStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssStmt createAssStmt()
  {
    AssStmtImpl assStmt = new AssStmtImpl();
    return assStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpr createUnaryExpr()
  {
    UnaryExprImpl unaryExpr = new UnaryExprImpl();
    return unaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberExpr createNumberExpr()
  {
    NumberExprImpl numberExpr = new NumberExprImpl();
    return numberExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarExpr createVarExpr()
  {
    VarExprImpl varExpr = new VarExprImpl();
    return varExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryExpr createBinaryExpr()
  {
    BinaryExprImpl binaryExpr = new BinaryExprImpl();
    return binaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TouchExpr createTouchExpr()
  {
    TouchExprImpl touchExpr = new TouchExprImpl();
    return touchExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjType createObjTypeFromString(EDataType eDataType, String initialValue)
  {
    ObjType result = ObjType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyStroke createKeyStrokeFromString(EDataType eDataType, String initialValue)
  {
    KeyStroke result = KeyStroke.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertKeyStrokeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MGPLPackage getMGPLPackage()
  {
    return (MGPLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MGPLPackage getPackage()
  {
    return MGPLPackage.eINSTANCE;
  }

} //MGPLFactoryImpl
