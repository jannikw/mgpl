/**
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.mGPL.impl;

import de.tu_dortmund.mGPL.MGPLPackage;
import de.tu_dortmund.mGPL.TouchExpr;
import de.tu_dortmund.mGPL.VarExpr;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Touch Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_dortmund.mGPL.impl.TouchExprImpl#getToucher <em>Toucher</em>}</li>
 *   <li>{@link de.tu_dortmund.mGPL.impl.TouchExprImpl#getTouchee <em>Touchee</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TouchExprImpl extends ExprImpl implements TouchExpr
{
  /**
   * The cached value of the '{@link #getToucher() <em>Toucher</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToucher()
   * @generated
   * @ordered
   */
  protected VarExpr toucher;

  /**
   * The cached value of the '{@link #getTouchee() <em>Touchee</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTouchee()
   * @generated
   * @ordered
   */
  protected VarExpr touchee;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TouchExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGPLPackage.Literals.TOUCH_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarExpr getToucher()
  {
    return toucher;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetToucher(VarExpr newToucher, NotificationChain msgs)
  {
    VarExpr oldToucher = toucher;
    toucher = newToucher;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.TOUCH_EXPR__TOUCHER, oldToucher, newToucher);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setToucher(VarExpr newToucher)
  {
    if (newToucher != toucher)
    {
      NotificationChain msgs = null;
      if (toucher != null)
        msgs = ((InternalEObject)toucher).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.TOUCH_EXPR__TOUCHER, null, msgs);
      if (newToucher != null)
        msgs = ((InternalEObject)newToucher).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.TOUCH_EXPR__TOUCHER, null, msgs);
      msgs = basicSetToucher(newToucher, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.TOUCH_EXPR__TOUCHER, newToucher, newToucher));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarExpr getTouchee()
  {
    return touchee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTouchee(VarExpr newTouchee, NotificationChain msgs)
  {
    VarExpr oldTouchee = touchee;
    touchee = newTouchee;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGPLPackage.TOUCH_EXPR__TOUCHEE, oldTouchee, newTouchee);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTouchee(VarExpr newTouchee)
  {
    if (newTouchee != touchee)
    {
      NotificationChain msgs = null;
      if (touchee != null)
        msgs = ((InternalEObject)touchee).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.TOUCH_EXPR__TOUCHEE, null, msgs);
      if (newTouchee != null)
        msgs = ((InternalEObject)newTouchee).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGPLPackage.TOUCH_EXPR__TOUCHEE, null, msgs);
      msgs = basicSetTouchee(newTouchee, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.TOUCH_EXPR__TOUCHEE, newTouchee, newTouchee));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MGPLPackage.TOUCH_EXPR__TOUCHER:
        return basicSetToucher(null, msgs);
      case MGPLPackage.TOUCH_EXPR__TOUCHEE:
        return basicSetTouchee(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGPLPackage.TOUCH_EXPR__TOUCHER:
        return getToucher();
      case MGPLPackage.TOUCH_EXPR__TOUCHEE:
        return getTouchee();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGPLPackage.TOUCH_EXPR__TOUCHER:
        setToucher((VarExpr)newValue);
        return;
      case MGPLPackage.TOUCH_EXPR__TOUCHEE:
        setTouchee((VarExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.TOUCH_EXPR__TOUCHER:
        setToucher((VarExpr)null);
        return;
      case MGPLPackage.TOUCH_EXPR__TOUCHEE:
        setTouchee((VarExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.TOUCH_EXPR__TOUCHER:
        return toucher != null;
      case MGPLPackage.TOUCH_EXPR__TOUCHEE:
        return touchee != null;
    }
    return super.eIsSet(featureID);
  }

} //TouchExprImpl
