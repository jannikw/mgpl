/**
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.generator;

import com.google.common.collect.Iterables;
import de.tu_dortmund.mGPL.AnimBlock;
import de.tu_dortmund.mGPL.ArrayVarDecl;
import de.tu_dortmund.mGPL.Assignment;
import de.tu_dortmund.mGPL.AttrAss;
import de.tu_dortmund.mGPL.BinaryExpr;
import de.tu_dortmund.mGPL.Block;
import de.tu_dortmund.mGPL.Decl;
import de.tu_dortmund.mGPL.EventBlock;
import de.tu_dortmund.mGPL.Expr;
import de.tu_dortmund.mGPL.ForStmt;
import de.tu_dortmund.mGPL.IfStmt;
import de.tu_dortmund.mGPL.KeyStroke;
import de.tu_dortmund.mGPL.NumberExpr;
import de.tu_dortmund.mGPL.ObjArrayDecl;
import de.tu_dortmund.mGPL.ObjDecl;
import de.tu_dortmund.mGPL.Program;
import de.tu_dortmund.mGPL.ScalarVarDecl;
import de.tu_dortmund.mGPL.Stmt;
import de.tu_dortmund.mGPL.StmtBlock;
import de.tu_dortmund.mGPL.TouchExpr;
import de.tu_dortmund.mGPL.UnaryExpr;
import de.tu_dortmund.mGPL.Var;
import de.tu_dortmund.mGPL.VarExpr;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MGPLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = IterableExtensions.<Program>head(Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class));
    String _name = program.getName();
    String _plus = (_name + ".html");
    fsa.generateFile(_plus, this.compile(program));
  }
  
  public CharSequence compile(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<canvas id=\"game\" ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("style=\"border:1px solid #000000;\">");
    _builder.newLine();
    _builder.append("Your browser does not support the HTML5 canvas tag.");
    _builder.newLine();
    _builder.append("</canvas>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"https://unpkg.com/sat@0.8.0/SAT.js\"\"></script>");
    _builder.newLine();
    _builder.append("<script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var canvas = document.getElementById(\"game\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Program attributes");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var ");
    String _escape = this.escape(program.getName());
    _builder.append(_escape, "\t");
    _builder.append(" = {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("...{x: 0, y: 0, w: 100, h: 100, s: 50},");
    _builder.newLine();
    {
      EList<AttrAss> _assignments = program.getAttributes().getAssignments();
      for(final AttrAss attr : _assignments) {
        _builder.append("\t\t");
        String _firstChar = this.firstChar(attr.getAttributeName());
        _builder.append(_firstChar, "\t\t");
        _builder.append(": ");
        String _compile = this.compile(attr.getValue());
        _builder.append(_compile, "\t\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Set the game dimensions");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("canvas.width = ");
    String _escape_1 = this.escape(program.getName());
    _builder.append(_escape_1, "\t");
    _builder.append(".w;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("canvas.height = ");
    String _escape_2 = this.escape(program.getName());
    _builder.append(_escape_2, "\t");
    _builder.append(".h");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Calculate frame time based on speed attribute");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var _FRAME_TIME = 230 - 2 * ");
    String _escape_3 = this.escape(program.getName());
    _builder.append(_escape_3, "\t");
    _builder.append(".s;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Default object attributes");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var _DEFAULTS = {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("circle: {type: \"circle\", a: null, r: 20, v: 1, x: 0, y: 0},");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rectangle: {type: \"rectangle\", a: null, h: 20, w: 20, v: 1, x: 0, y: 0},");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("triangle: {type: \"triangle\", a: null, h: 20, w: 20, v: 1, x: 0, y: 0},");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// All object that will be animated and rendered");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var _OBJECTS = [];");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Declarations");
    _builder.newLine();
    {
      EList<Decl> _declarations = program.getDeclarations();
      for(final Decl decl : _declarations) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(decl);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Initialization block");
    _builder.newLine();
    _builder.append("\t");
    String _compile_2 = this.compile(program.getInit());
    _builder.append(_compile_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Block> _blocks = program.getBlocks();
      for(final Block block : _blocks) {
        _builder.append("\t");
        CharSequence _compile_3 = this.compile(block);
        _builder.append(_compile_3, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("window.setInterval(canvas => {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Trigger animations of each object");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_OBJECTS.forEach(o => {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (o.a) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("o.a(o);\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Clear previous frame");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("const context = canvas.getContext(\'2d\');");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("context.clearRect(0, 0, canvas.width, canvas.height);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_OBJECTS.forEach(o => {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Skip rendering when object is invisible");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (o.v == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Render based on the type of object");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (o.type === \"circle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.beginPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.arc(o.x, o.y, o.r, 0, 2 * Math.PI, false);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fillStyle = \"#000000\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fill();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (o.type === \"rectangle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fillStyle = \"#000000\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fillRect(o.x, o.y, o.w, o.h);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (o.type === \"triangle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.beginPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.moveTo(o.x, o.y);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.lineTo(o.x + o.w, o.y);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.lineTo(o.x + o.w / 2, o.y + o.h);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.closePath();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fillStyle = \"#000000\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.fill();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}, _FRAME_TIME, canvas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Touches calculation using http://jriecken.github.io/sat-js/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("function touches(a, b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var V = SAT.Vector;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var C = SAT.Circle;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var P = SAT.Polygon;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function transform(x) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (x.type === \"circle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return new C(new V(x.x, x.y), x.r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (x.type === \"rectangle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return new P(new V(x.x, x.y), [new V(0,0), new V(x.w, 0), new V(x.w, x.h), new V(0, x.h)]);\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (x.type == \"triangle\") {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return new P(new V(x.x, x.y), [new V(0,0), new V(x.w, 0), new V(x.w/2, x.h)]);\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var at = transform(a);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var bt = transform(b);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var test = a.type[0] + b.type[0];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (test === \"cc\") {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return SAT.testCircleCircle(at, bt);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (test === \"rc\" || test === \"tc\") {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return SAT.testPolygonCircle(at, bt);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (test === \"cr\" || test === \"ct\") {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return SAT.testPolygonCircle(bt, at);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (test === \"rr\" || test === \"tr\" || test === \"rt\" || test === \"tt\") {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return SAT.testPolygonPolygon(at, bt);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Decl decl) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (decl instanceof ScalarVarDecl) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("var ");
      String _escape = this.escape(((ScalarVarDecl)decl).getName());
      _builder.append(_escape);
      _builder.append(" = ");
      Object _elvis = null;
      Expr _initialization = ((ScalarVarDecl)decl).getInitialization();
      String _compile = null;
      if (_initialization!=null) {
        _compile=this.compile(_initialization);
      }
      if (_compile != null) {
        _elvis = _compile;
      } else {
        _elvis = Integer.valueOf(0);
      }
      _builder.append(((Object)_elvis));
      _builder.append(";");
      _switchResult = _builder;
    }
    if (!_matched) {
      if (decl instanceof ArrayVarDecl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("var ");
        String _escape = this.escape(((ArrayVarDecl)decl).getName());
        _builder.append(_escape);
        _builder.append(" = new Array(");
        int _size = ((ArrayVarDecl)decl).getSize();
        _builder.append(_size);
        _builder.append(").fill(0);");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (decl instanceof ObjDecl) {
        _matched=true;
        _switchResult = this.compile(((ObjDecl)decl));
      }
    }
    if (!_matched) {
      if (decl instanceof ObjArrayDecl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("var ");
        String _escape = this.escape(((ObjArrayDecl)decl).getName());
        _builder.append(_escape);
        _builder.append(" = new Array(");
        int _size = ((ObjArrayDecl)decl).getSize();
        _builder.append(_size);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("for (var i = 0; i < ");
        int _size_1 = ((ObjArrayDecl)decl).getSize();
        _builder.append(_size_1);
        _builder.append("; i++) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _escape_1 = this.escape(((ObjArrayDecl)decl).getName());
        _builder.append(_escape_1, "\t");
        _builder.append("[i] = { ..._DEFAULTS.");
        String _literal = ((ObjArrayDecl)decl).getType().getLiteral();
        _builder.append(_literal, "\t");
        _builder.append(" };");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("_OBJECTS.push(");
        String _escape_2 = this.escape(((ObjArrayDecl)decl).getName());
        _builder.append(_escape_2, "\t");
        _builder.append("[i]);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final ObjDecl decl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ");
    String _escape = this.escape(decl.getName());
    _builder.append(_escape);
    _builder.append(" = {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("..._DEFAULTS.");
    String _literal = decl.getType().getLiteral();
    _builder.append(_literal, "\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    {
      EList<AttrAss> _assignments = decl.getAttributes().getAssignments();
      for(final AttrAss attr : _assignments) {
        _builder.append("\t");
        String _firstChar = this.firstChar(attr.getAttributeName());
        _builder.append(_firstChar, "\t");
        _builder.append(": ");
        String _compile = this.compile(attr.getValue());
        _builder.append(_compile, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("};");
    _builder.newLine();
    _builder.append("_OBJECTS.push(");
    String _escape_1 = this.escape(decl.getName());
    _builder.append(_escape_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String compile(final Expr expr) {
    String _switchResult = null;
    boolean _matched = false;
    if (expr instanceof NumberExpr) {
      _matched=true;
      _switchResult = String.valueOf(((NumberExpr)expr).getNumber());
    }
    if (!_matched) {
      if (expr instanceof BinaryExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("((");
        String _compile = this.compile(((BinaryExpr)expr).getLeft());
        _builder.append(_compile);
        _builder.append(" ");
        String _op = ((BinaryExpr)expr).getOp();
        _builder.append(_op);
        _builder.append(" ");
        String _compile_1 = this.compile(((BinaryExpr)expr).getRight());
        _builder.append(_compile_1);
        _builder.append(") | 0)");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expr instanceof UnaryExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _op = ((UnaryExpr)expr).getOp();
        _builder.append(_op);
        _builder.append("(");
        String _compile = this.compile(((UnaryExpr)expr).getOperand());
        _builder.append(_compile);
        _builder.append(") | 0)");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expr instanceof TouchExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(touches(");
        String _compile = this.compile(((TouchExpr)expr).getToucher());
        _builder.append(_compile);
        _builder.append(", ");
        String _compile_1 = this.compile(((TouchExpr)expr).getTouchee());
        _builder.append(_compile_1);
        _builder.append(") | 0)");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expr instanceof VarExpr) {
        _matched=true;
        _switchResult = this.compile(((VarExpr)expr).getVar());
      }
    }
    if (!_matched) {
      throw new IllegalArgumentException("unknown expression type");
    }
    return _switchResult;
  }
  
  public String compile(final Var v) {
    String _escape = this.escape(v.getVariable().getName());
    String _elvis = null;
    Expr _index = v.getIndex();
    String _compile = null;
    if (_index!=null) {
      _compile=this.compile(_index);
    }
    String _wrap = null;
    if (_compile!=null) {
      _wrap=this.wrap(_compile, "[", "]");
    }
    if (_wrap != null) {
      _elvis = _wrap;
    } else {
      _elvis = "";
    }
    String _plus = (_escape + _elvis);
    String _elvis_1 = null;
    String _attribute = v.getAttribute();
    String _firstChar = null;
    if (_attribute!=null) {
      _firstChar=this.firstChar(_attribute);
    }
    String _prepend = null;
    if (_firstChar!=null) {
      _prepend=this.prepend(_firstChar, ".");
    }
    if (_prepend != null) {
      _elvis_1 = _prepend;
    } else {
      _elvis_1 = "";
    }
    return (_plus + _elvis_1);
  }
  
  public String compile(final StmtBlock block) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Stmt> _statements = block.getStatements();
      for(final Stmt stmt : _statements) {
        CharSequence _compile = this.compile(stmt);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public CharSequence compile(final Stmt stmt) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (stmt instanceof Assignment) {
      _matched=true;
      _switchResult = this.compile(((Assignment)stmt));
    }
    if (!_matched) {
      if (stmt instanceof IfStmt) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("if (");
        String _compile = this.compile(((IfStmt)stmt).getCondition());
        _builder.append(_compile);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _compile_1 = this.compile(((IfStmt)stmt).getThen());
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        {
          StmtBlock _else = ((IfStmt)stmt).getElse();
          boolean _tripleNotEquals = (_else != null);
          if (_tripleNotEquals) {
            _builder.append(" else {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _compile_2 = this.compile(((IfStmt)stmt).getElse());
            _builder.append(_compile_2, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (stmt instanceof ForStmt) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("for (");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _compile = this.compile(((ForStmt)stmt).getInit());
        _builder.append(_compile, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _compile_1 = this.compile(((ForStmt)stmt).getCondition());
        _builder.append(_compile_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compile_2 = this.compile(((ForStmt)stmt).getStep());
        _builder.append(_compile_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append(") {");
        _builder.newLine();
        _builder.append("\t");
        String _compile_3 = this.compile(((ForStmt)stmt).getBody());
        _builder.append(_compile_3, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final Block block) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (block instanceof AnimBlock) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function ");
      String _escape = this.escape(((AnimBlock)block).getName());
      _builder.append(_escape);
      _builder.append("(");
      String _escape_1 = this.escape(((AnimBlock)block).getTarget().getName());
      _builder.append(_escape_1);
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      String _compile = this.compile(((AnimBlock)block).getAction());
      _builder.append(_compile, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _switchResult = _builder;
    }
    if (!_matched) {
      if (block instanceof EventBlock) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("// on ");
        KeyStroke _key = ((EventBlock)block).getKey();
        _builder.append(_key);
        _builder.newLineIfNotEmpty();
        _builder.append("document.addEventListener(\"keydown\", (event) => {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if (event.key == ");
        String _translateToJs = this.translateToJs(((EventBlock)block).getKey());
        _builder.append(_translateToJs, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _compile = this.compile(((EventBlock)block).getAction());
        _builder.append(_compile, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("});");
        _builder.newLine();
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  public String translateToJs(final KeyStroke keyStroke) {
    String _switchResult = null;
    if (keyStroke != null) {
      switch (keyStroke) {
        case SPACE:
          _switchResult = " ";
          break;
        case LEFT_ARROW:
          _switchResult = "ArrowLeft";
          break;
        case RIGHT_ARROW:
          _switchResult = "ArrowRight";
          break;
        case UP_ARROW:
          _switchResult = "ArrowUp";
          break;
        case DOWN_ARROW:
          _switchResult = "ArrowDown";
          break;
        default:
          break;
      }
    }
    return this.wrap(_switchResult, "\"", "\"");
  }
  
  public CharSequence compile(final Assignment ass) {
    StringConcatenation _builder = new StringConcatenation();
    String _compile = this.compile(ass.getVar());
    _builder.append(_compile);
    _builder.append(" = ");
    String _compile_1 = this.compile(ass.getValue());
    _builder.append(_compile_1);
    return _builder;
  }
  
  public String wrap(final String s, final String left, final String right) {
    return ((left + s) + right);
  }
  
  public String prepend(final String s, final String prefix) {
    return (prefix + s);
  }
  
  public String append(final String s, final String postfix) {
    return (s + postfix);
  }
  
  public String firstChar(final String s) {
    return String.valueOf(s.charAt(0));
  }
  
  public String escape(final String s) {
    return ("__" + s);
  }
}
