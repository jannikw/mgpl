/*
 * generated by Xtext 2.20.0
 */
package de.tu_dortmund.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tu_dortmund.mGPL.Program
import de.tu_dortmund.mGPL.Expr
import de.tu_dortmund.mGPL.Decl
import de.tu_dortmund.mGPL.NumberExpr
import de.tu_dortmund.mGPL.ScalarVarDecl
import de.tu_dortmund.mGPL.ArrayVarDecl
import de.tu_dortmund.mGPL.ObjDecl
import de.tu_dortmund.mGPL.ObjArrayDecl
import de.tu_dortmund.mGPL.BinaryExpr
import de.tu_dortmund.mGPL.UnaryExpr
import de.tu_dortmund.mGPL.TouchExpr
import de.tu_dortmund.mGPL.VarExpr
import de.tu_dortmund.mGPL.StmtBlock
import de.tu_dortmund.mGPL.Stmt
import de.tu_dortmund.mGPL.Var
import de.tu_dortmund.mGPL.Assignment
import de.tu_dortmund.mGPL.IfStmt
import de.tu_dortmund.mGPL.ForStmt
import de.tu_dortmund.mGPL.AnimBlock
import de.tu_dortmund.mGPL.Block
import de.tu_dortmund.mGPL.EventBlock
import de.tu_dortmund.mGPL.KeyStroke

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MGPLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.toIterable.filter(Program).head
		
		// Compile the game to <name>.html
		fsa.generateFile(program.name + ".html", program.compile)
	}
	
	def compile(Program program) '''
	<!DOCTYPE html>
	<html>
	<body>
	
	<canvas id="game" 
		style="border:1px solid #000000;">
	Your browser does not support the HTML5 canvas tag.
	</canvas>
	
	<script type="text/javascript" src="https://unpkg.com/sat@0.8.0/SAT.js""></script>
	<script>
		var canvas = document.getElementById("game");
		
		// Program attributes
		var «program.name.escape» = {
			...{x: 0, y: 0, w: 100, h: 100, s: 50},
			«FOR attr : program.attributes.assignments»
			«attr.attributeName.firstChar»: «attr.value.compile»,
			«ENDFOR»
		};
		
		// Set the game dimensions
		canvas.width = «program.name.escape».w;
		canvas.height = «program.name.escape».h
		
		// Calculate frame time based on speed attribute
		var _FRAME_TIME = 230 - 2 * «program.name.escape».s;
		
		// Default object attributes
		var _DEFAULTS = {
			circle: {type: "circle", a: null, r: 20, v: 1, x: 0, y: 0},
			rectangle: {type: "rectangle", a: null, h: 20, w: 20, v: 1, x: 0, y: 0},
			triangle: {type: "triangle", a: null, h: 20, w: 20, v: 1, x: 0, y: 0},
		};
		
		// All object that will be animated and rendered
		var _OBJECTS = [];
		
		// Declarations
		«FOR decl : program.declarations»
			«decl.compile»
		«ENDFOR»
		
		// Initialization block
		«program.init.compile»
		
		«FOR block : program.blocks»
			«block.compile»
			
		«ENDFOR»
		
		window.setInterval(canvas => {
			// Trigger animations of each object
			_OBJECTS.forEach(o => {
				if (o.a) {
					o.a(o);	
				}	
			});
			
			// Clear previous frame
			const context = canvas.getContext('2d');
			context.clearRect(0, 0, canvas.width, canvas.height);
			
			_OBJECTS.forEach(o => {
				// Skip rendering when object is invisible
				if (o.v == 0) {
					return;
				}
				
				// Render based on the type of object
				if (o.type === "circle") {
					context.beginPath();
					context.arc(o.x, o.y, o.r, 0, 2 * Math.PI, false);
					context.fillStyle = "#000000";
					context.fill();
				} else if (o.type === "rectangle") {
					context.fillStyle = "#000000";
					context.fillRect(o.x, o.y, o.w, o.h);
				} else if (o.type === "triangle") {
					context.beginPath();
					context.moveTo(o.x, o.y);
					context.lineTo(o.x + o.w, o.y);
					context.lineTo(o.x + o.w / 2, o.y + o.h);
					context.closePath();
					
					context.fillStyle = "#000000";
					context.fill();
				}
			});
		}, _FRAME_TIME, canvas);
		
		// Touches calculation using http://jriecken.github.io/sat-js/
		function touches(a, b) {
			var V = SAT.Vector;
			var C = SAT.Circle;
			var P = SAT.Polygon;
			
			function transform(x) {
				if (x.type === "circle") {
					return new C(new V(x.x, x.y), x.r);
				} else if (x.type === "rectangle") {
					return new P(new V(x.x, x.y), [new V(0,0), new V(x.w, 0), new V(x.w, x.h), new V(0, x.h)]);	
				} else if (x.type == "triangle") {
					return new P(new V(x.x, x.y), [new V(0,0), new V(x.w, 0), new V(x.w/2, x.h)]);	
				}
			}
			
			var at = transform(a);
			var bt = transform(b);
			var test = a.type[0] + b.type[0];
			
			if (test === "cc") {
				return SAT.testCircleCircle(at, bt);
			}
			if (test === "rc" || test === "tc") {
				return SAT.testPolygonCircle(at, bt);
			}
			if (test === "cr" || test === "ct") {
				return SAT.testPolygonCircle(bt, at);
			}
			if (test === "rr" || test === "tr" || test === "rt" || test === "tt") {
				return SAT.testPolygonPolygon(at, bt);
			}
		}
	</script>
	</body>
	</html>
	'''
	
	def compile(Decl decl) {
		switch decl {
			ScalarVarDecl: '''var «decl.name.escape» = «decl.initialization?.compile ?: 0»;'''
			ArrayVarDecl: '''var «decl.name.escape» = new Array(«decl.size»).fill(0);'''
			ObjDecl: decl.compile
			ObjArrayDecl: '''
			var «decl.name.escape» = new Array(«decl.size»);
			for (var i = 0; i < «decl.size»; i++) {
				«decl.name.escape»[i] = { ..._DEFAULTS.«decl.type.literal» };
				_OBJECTS.push(«decl.name.escape»[i]);
			}
			'''
		}
	}
	
	def compile(ObjDecl decl) '''
		var «decl.name.escape» = {
			..._DEFAULTS.«decl.type.literal»,
			«FOR attr : decl.attributes.assignments»
			«attr.attributeName.firstChar»: «attr.value.compile»,
			«ENDFOR»
		};
		_OBJECTS.push(«decl.name.escape»);
	'''
	
	def String compile(Expr expr) {
		 // Using (expr | 0) to keep results in integer space
		switch expr {
			NumberExpr: String.valueOf(expr.number)
			BinaryExpr: '''((«expr.left.compile» «expr.op» «expr.right.compile») | 0)'''
			UnaryExpr: '''(«expr.op»(«expr.operand.compile») | 0)'''
			TouchExpr: '''(touches(«expr.toucher.compile», «expr.touchee.compile») | 0)'''
			VarExpr: expr.^var.compile
			default: throw new IllegalArgumentException("unknown expression type")
		}
	}
	
	def compile(Var v) {
		v.variable.name.escape +
		(v.index?.compile()?.wrap("[", "]") ?: "") +
		(v.attribute?.firstChar?.prepend(".") ?: "")
	}
	
	def String compile(StmtBlock block) '''
		«FOR stmt : block.statements»
		«stmt.compile»
		«ENDFOR»
	'''
	
	def compile(Stmt stmt) {
		switch stmt {
			Assignment: stmt.compile
			IfStmt: '''
				if («stmt.condition.compile») {
					«stmt.then.compile»
				}«IF stmt.^else !== null» else {
					«stmt.^else.compile»
				}
				«ENDIF»
				'''
			ForStmt: '''
				for (
					«stmt.init.compile»;
					«stmt.condition.compile»;
					«stmt.step.compile»
				) {
					«stmt.body.compile»
				}'''
		}
	}
	
	def compile(Block block) {
		switch block {
			AnimBlock: '''
			function «block.name.escape»(«block.target.name.escape») {
				«block.action.compile»
			}
			'''
			EventBlock: '''
			// on «block.key»
			document.addEventListener("keydown", (event) => {
				if (event.key == «block.key.translateToJs») {
					«block.action.compile»
				}
			});
			'''
		}
	}
	
	// Translate the keystroke to the js key
	def translateToJs(KeyStroke keyStroke) {
		switch keyStroke {
			case SPACE: " "
			case LEFT_ARROW: "ArrowLeft"
			case RIGHT_ARROW: "ArrowRight"
			case UP_ARROW: "ArrowUp"
			case DOWN_ARROW: "ArrowDown"
			
		}.wrap("\"", "\"")
	}
	
	def compile(Assignment ass) 
		'''«ass.^var.compile» = «ass.value.compile»'''
	
	
	def wrap(String s, String left, String right) {
		left + s + right
	}
	
	def prepend(String s, String prefix) {  
		prefix + s
	}
	
	def append(String s, String postfix) {
		s + postfix
	}
	
	def firstChar(String s) {
		String.valueOf(s.charAt(0))
	}
	
	// Escape identifiers browser function are not overwritten
	def escape(String s) {
		"__" + s
	}
}
